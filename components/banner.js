import { useEffect, useState, useLayoutEffect } from 'react';
import { WolframAutomata } from '../lib/wolfram';
import { wait } from '../lib/util';

function useWindowSize() {
  const [size, setSize] = useState([0, 0]);
  useLayoutEffect(() => {
    function updateSize() {
      setSize([window.innerWidth, window.innerHeight]);
    }
    window.addEventListener('resize', updateSize);
    updateSize();
    return () => window.removeEventListener('resize', updateSize);
  }, []);
  return size;
}

export default function Banner() {
  const [windowWidth, windowHeight] = useWindowSize();
  const [bs, setBs] = useState(2);
  const [breadth, setBreadth] = useState(32);
  const [rule, setRule] = useState(30);
  const [showInfo, setShowInfo] = useState(false);
  const [seed, setSeed] = useState(-1);
  const height = bs * breadth;
  let interval;

  const StateLink = ({ setter, num }) => {
    return (
      <a href="" className="text-stone-500 underline" onClick={e => {
        e.preventDefault();
        setter(num);
      }}>{num}</a>
    )
  };

  const ValueChanger = ({ name, value, setter, presets }) => {
    return (<p>
      {name}: <input className="w-12" type="number" value={value} onChange={e => setter(e.target.value)}/>
      <span> try </span>{presets.map((p, i) => (
        <>
        <StateLink setter={setter} num={p} />
              {(i !== presets.length - 1) ? ', ' : ''}
        </>
      ))}
    </p>);
  }

  useEffect(async () => {
    const canvas = document.getElementById('banner');
    const ctx = canvas.getContext('2d');
    const dpi = window.devicePixelRatio;
    ctx.clearRect(0, 0, 9999, 9999);
    canvas.height = height * dpi;
    canvas.setAttribute('width', dpi * getComputedStyle(canvas).getPropertyValue('width').slice(0, -2));
    canvas.setAttribute('height', dpi * getComputedStyle(canvas).getPropertyValue('height').slice(0, -2));
    let automata = new WolframAutomata(rule, breadth, seed);
    let x = 0;
    const tooltip = document.querySelector('#banner-tooltip');

    ctx.fillStyle = 'black';
    ctx.imageSmoothingEnabled = false;
    const bsd = bs * dpi;

    console.log(canvas.clientWidth, dpi);
    for (let x = 0; x < dpi * canvas.clientWidth / bs; x++) {
      const col = automata.nextState();
      for (let v = 0; v < col.length; v++) {
        if (col[v]) {
          ctx.fillRect(bs * dpi * x, bs * dpi * v, bs * dpi, bs * dpi);
        }
      }
    }
  });

  return (
    <>
      <canvas id="banner" className="hover:cursor-help w-full" onClick={e => setShowInfo(true)} height={height}>
      </canvas>
      <div id="banner-info" className="md:ml-20 ml-10 font-serif h-full" hidden={!showInfo}>
        <p>The banner you see here is generated by elementary cellular automata, as described famously by Stephen Wolfram</p>
        <ValueChanger name="rule" value={rule} setter={setRule} presets={[30, 45, 90, 105, 110]} />
        <ValueChanger name="breadth" value={breadth} setter={setBreadth} presets={[16, 32, 255]} />
        <ValueChanger name="cell size" value={bs} setter={setBs} presets={[2, 4, 8]} />
        <ValueChanger name="seed" value={seed} setter={setSeed} presets={[1, 3, 7]} />
        <p><a href="" className="text-stone-500 underline" onClick={e => {
          e.preventDefault();
          setSeed(-1 - Math.random());
        }}>random seed</a></p>
        <p><a href="" className="text-stone-500 underline" onClick={e => {
          e.preventDefault();
          setShowInfo(false);
        }}>hide controls</a></p>
      </div>
    </>
  );
}
